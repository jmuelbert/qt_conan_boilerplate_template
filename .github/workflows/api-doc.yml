---
name: API Documentation
on:
  push:
    branches:
      - main
    tags:
      - "*"
    paths:
      - "**.cpp"
      - "**.h"
      - "**.hpp"
      - "**.py"
      - cmake/**
      - src/**
      - CMakeLists.txt
      - conanfile.py
      - ".github/workflows/ci.yml"
      - "deploy/flatpak.yaml"
      - "snap/snapcraft.yaml"

env:
  # Target
  TARGET_NAME: qtwidgettest
  PROJECT_NAME: qtconanboilerplate
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  QT_VERSION: "6.4.1"
  QT_DIR: ${{ github.workspace }}
  QT_ARCH: "gcc_64"
  QT_TOOLS: ""
  QT_TARGET: "desktop"
  
jobs:
  generate-documentation:
    name: generate-docu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Python pip Cache (Linux)
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.name }}-${{ hashFiles('py-requirements.txt') }}
          
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ninja-build clang-tidy libqt5charts5-dev libglib2.0-dev build-essential libc6-dev glib-networking glibc-source libstdc++-11-dev
          sudo apt-get install -y --no-install-recommends dpkg pkg-config doxygen ccache
          echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
          echo "CC=gcc-11" >> $GITHUB_ENV
      
      - name: "‚öôÔ∏è Install Python"
        id: python
        uses: actions/setup-python@v4
        with:
          # Read python version from a file .python-version
          # python-version-file: ".python-version"
          check-latest: true
          cache: pip   
  
      - name: "‚öôÔ∏è Install Python dependencies"
        shell: bash
        id: python-deps
        run: |
          python -m pip install --upgrade pip
          pip3 install -r ".github/workflows/requirements.txt"
          pip3 install "conan<2"
          
      - name: Conan Cache
        uses: actions/cache@v2
        with:
          path: ~/.conan/data
          key: conan-${{ matrix.name }}-${{ hashFiles('**/Conan.cmake') }}
          
      - name: Configure Conan
        shell: bash
        run: |
          echo "Setup conan"
          conan user
          conan config init
          conan profile show default
      - name: "üîß Setup Cache"
        uses: ./.github/actions/setup_cache
        with:
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: "‚öôÔ∏è Install Qt Version ${{ matrix.qt_version }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: "${{ matrix.qt_version }}"
          dir: "${{ env.QT_DIR }}"
          # host: ${{ runner.os }}
          arch: "${{ env.QT_ARCH }}"
          target: "${{ env.QT_TARGET }}"
          tools: "${{ env.QT_TOOLS }}"
          setup-python: "true"
          cache: "true"
          cache-key-prefix: "${{ runner.os }}-install-qt-action"
          set-env: "true"
          install-deps: "true"

      - uses: hendrikmuhs/ccache-action@v1
        if: runner.os == 'Linux'
        with:
          key: ${{ matrix.os }}-${{ matrix.build_type }}
          max-size: 50M

      - name: restore ccache
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{runner.workspace}}/ccache
          key: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}-${{ github.sha }}
          restore-keys: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}

      - name: check ccache stats prior to build
        run: ccache --zero-stats --show-stats

      - name: "Cleanup Conan system packages (they are not properly cached)"
        run: |
          conan remove -f '*/system'
      - name: "Add GCC problem matcher"
        uses: ammaraskar/gcc-problem-matcher@master

      - name: "Create Build Environment"
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory build
        
        # make sure coverage is only enabled for Debug builds, since it sets -O0 to make sure coverage
        # has meaningful results
      - name: "Configure CMake"
        working-directory: build
        shell: bash
        run: |
          cmake --build . --target docs
          
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: build/docs/html # The folder the action should deploy.
          TARGET_FOLDER: docs/
