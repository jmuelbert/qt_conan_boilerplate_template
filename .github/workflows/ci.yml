---
name: ci
on:
  pull_request:
  release:
    types: [published]
  push:
    tags:
    branches:
      - main
      - develop

env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  CLANG_TIDY_VERSION: "12.0.0"

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        generator:
          - "Ninja Multi-Config"
        build_type:
          - Release
          - Debug
        developer_mode:
          - ON
          - OFF
        qt_version:
          - "6.3.0"
        qt_target:
          - "desktop"
        qt_arch:
          - "win64_msvc2019_64"

        exclude:
          - os: ubuntu-20.04
            compiler: apple-clang
          - os: macosx-11
            compiler: [clang-12, gcc-10]
          - os: windows-2022
            compiler: [clang-12, gcc-10]

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - os: ubuntu-20.04
            compiler: gcc-10
            generator: "Unix Makefiles"
            gcov_executable: gcov

          - os: ubuntu-20.04
            compiler: clang-12
            generator: "Unix Makefiles"
            gcov_executable: "llvm-cov gcov"

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            developer_mode: OFF
            package_generator: TBZ2

          - os: macosx-11
            compiler: apple-clang
            generator: "Ninja"
            build_type: Release
            developer_mode: OFF

          - os: macosx-11
            compiler: apple-clang
            generator: "Ninja"
            build_type: Debug
            developer_mode: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            developer_mode: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            developer_mode: On

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Debug
            developer_mode: OFF

          - os: windows-2022
            compiler: msvc
            generator: "Visual Studio 17 2022"
            build_type: Release
            developer_mode: OFF
            package_generator: ZIP

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - name: "üß∞ Checkout"
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Install Python
        id: python
        uses: actions/setup-python@v3

      - name: Install Python dependencies
        shell: bash
        id: python-deps
        run: |
          python -m pip install --upgrade pip
          if [ -f ./.github/workflows/requirements.txt ]; then
            pip install -r ./.github/workflows/requirements.txt;
          fi

      - name: Install deps
        if: runner.os == 'Linux'
        run: |
          echo "no deps..."
          # sudo apt install -y libclang-dev

      - name: Install MSVC Windows deps
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
          toolset: 14.29

      - name: "üîß Setup Cache"
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}
          developer_mode: ${{ matrix.developer_mode }}
          generator: ${{ matrix.generator }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{¬†matrix.qt_version }}
          # host: ${{ runner.os }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          install-deps: "true"
          # modules: 'qtcharts qtwebengine'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          setup-python: "true"
          tools: "tools_ifw"
          set-env: "true"

      - name: Cleanup Conan system packages (they are not properly cached)
        run: |
          conan remove -f '*/system'

        # make sure coverage is only enabled for Debug builds, since it sets -O0 to make sure coverage
        # has meaningful results
      - name: Configure CMake
        shell: bash
        run: |
          mkdir -p ./build
          cd ./build
          conan install ../conanfile.py -b missing -pr:b default -s build_type="${{ matrix.build_type }}"  -g CMakeToolchain
          cd ..
          cmake -S . -B ./build -G "${{matrix.generator}}" \
            -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} \
            -DENABLE_DEVELOPER_MODE:BOOL=${{matrix.developer_mode}} \
            # -DOPT_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' && matrix.developer_mode == 'OFF' }} \
            -DOPT_ENABLE_COVERAGE:BOOL='OFF' \
            -DCMAKE_TOOLCHAIN_FILE:PATH="./build/generators/conan_toolchain.cmake" \
            -DGIT_SHA:STRING=${{ github.sha }}

      - name: "‚öôÔ∏è Build"
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}

      - name: "Unix - üß™ Test and coverage"
        if: runner.os != 'Windows'
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        working-directory: ./build
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{matrix.build_type}}

      - name: CPack
        if: matrix.package_generator != ''
        working-directory: ./build
        run: |
          cpack -C ${{matrix.build_type}} -G ${{matrix.package_generator}}

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        with:
          files: |
            build/*-*${{ matrix.build_type }}*-*.*

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml

  diagram:
    name: Build diagram
    needs: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Update diagram
        uses: githubocto/repo-visualizer@0.7.1
        with:
          output_file: "images/diagram.svg"
          excluded_paths: "dist,node_modules"
