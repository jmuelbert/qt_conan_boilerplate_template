---
name: "Continuous Integration"

# yamllint disable
on:
  # yamllint enable
  push:
    tags:
      - "*"
    branches-ignore:
      - "dependabot/**"
    paths:
      - "**.cpp"
      - "**.h"
      - "**.hpp"
      - "**.py"
      - cmake/**
      - src/**
      - CMakeLists.txt
      - conanfile.py
      - ".github/workflows/ci.yml"
      - "deploy/flatpak.yaml"
      - "snap/snapcraft.yaml"

  pull_request:
    # The branches below must be a subset of the branches above
    types: [opened, synchronize, reopened]
    paths:
      - "**.cpp"
      - "**.h"
      - "**.hpp"
      - "**.py"
      - cmake/**
      - src/**
      - CMakeLists.txt
      - conanfile.py
      - ".github/workflows/ci.yml"
      - "deploy/flatpak.yaml"
      - "snap/snapcraft.yaml"

  workflow_dispatch:

env:
  # Target
  TARGET_NAME: qtwidgettest
  PROJECT_NAME: qtconanboilerplate
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  QT_VERSION: "6.3.1"
  QT_DIR: ${{ github.workspace }}
  QT_ARCH: "gcc_64"
  QT_TOOLS: ""
  QT_TARGET: "desktop"

jobs:
  # lint:
  # tests:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os: [ubuntu-latest, ubuntu-22.04]
        generator:
          - "Ninja"
        build_type:
          - Debug
        qt_version: [5.15.2, 6.4.0]

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: "Cancel Previous Runs"
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

      - name: "üß∞ Checkout"
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: "‚öôÔ∏è Install Python"
        id: python
        uses: actions/setup-python@v4
        with:
          # Read python version from a file .python-version
          # python-version-file: ".python-version"
          check-latest: true
          cache: pip

      - name: "‚öôÔ∏è Install Python dependencies"
        shell: bash
        id: python-deps
        run: |
          python -m pip install --upgrade pip
          pip3 install "conan<2"

      - name: "üêß ‚öôÔ∏è Install Linux dependencies"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && DEBIAN_FRONTEND=--noninteractive \
          sudo apt-get --no-install-recommends --assume-yes install \
            libclang-dev \
            ninja-build \
            gcovr \
            ccache \
            cppcheck
          echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV
          echo "CXX=g++-10" >> $GITHUB_ENV
          echo "CC=gcc-10" >> $GITHUB_ENV

      - name: Configure Conan
        shell: bash
        run: |
          echo "Setup conan"
          conan user
          conan config init
          conan profile show default

      - name: "üîß Setup Cache"
        uses: ./.github/actions/setup_cache
        with:
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: "‚öôÔ∏è Install Qt Version ${{ matrix.qt_version }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: "${{ matrix.qt_version }}"
          dir: "${{ env.QT_DIR }}"
          # host: ${{ runner.os }}
          arch: "${{ env.QT_ARCH }}"
          target: "${{ env.QT_TARGET }}"
          tools: "${{ env.QT_TOOLS }}"
          setup-python: "true"
          cache: "true"
          cache-key-prefix: "${{ runner.os }}-install-qt-action"
          set-env: "true"
          install-deps: "true"

      - uses: hendrikmuhs/ccache-action@v1
        if: runner.os == 'Linux'
        with:
          key: ${{ matrix.os }}-${{ matrix.build_type }}
          max-size: 50M

      - name: restore ccache
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{runner.workspace}}/ccache
          key: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}-${{ github.sha }}
          restore-keys: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}

      - name: check ccache stats prior to build
        run: ccache --zero-stats --show-stats

      - name: "Cleanup Conan system packages (they are not properly cached)"
        run: |
          conan remove -f '*/system'

      - name: "Add GCC problem matcher"
        uses: ammaraskar/gcc-problem-matcher@master

      - name: "Create Build Environment"
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory build

        # make sure coverage is only enabled for Debug builds, since it sets -O0 to make sure coverage
        # has meaningful results
      - name: "Configure CMake"
        working-directory: build
        shell: bash
        run: |
          mkdir -pv usr
          cmake -S .. -B . -G "${{matrix.generator}}" \
            -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} \
            -DCMAKE_INSTALL_PREFIX:PATH="./usr" \
            -DOPT_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} \
            -DBUILD_TESTING:BOOL=${{ matrix.build_type == 'Debug' }}

      - name: "üöß Build"
        working-directory: build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build . --config ${{matrix.build_type}}

      - name: check ccache stats prior to build
        run: ccache --zero-stats --show-stats

      - name: "üêß üß™ Test and coverage"
        working-directory: build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml

      - name: "Publish to codecov"
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml
