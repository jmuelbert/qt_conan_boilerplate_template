---
name: "C/C++ CI"

on:
  push:
    tags:
      - "*"
    branches-ignore:
      - "dependabot/**"
    paths:
      - "**.cpp"
      - "**.h"
      - "**.hpp"
      - "**.py"
      - cmake/**
      - src/**
      - CMakeLists.txt
      - conanfile.py
      - ".github/workflows/ci.yml"
      - "deploy/flatpak.yml"
      - "deploy/AppImageBuilder.yml"
      - "snap/snapcraft.yml"

  pull_request:
    # The branches below must be a subset of the branches above
    types: [opened, synchronize, reopened]
    paths:
      - "**.cpp"
      - "**.h"
      - "**.hpp"
      - "**.py"
      - cmake/**
      - src/**
      - CMakeLists.txt
      - conanfile.py
      - ".github/workflows/ci.yml"
      - "deploy/flatpak.yml"
      - "deploy/AppImageBuilder.yml"
      - "snap/snapcraft.yml"

  workflow_dispatch:

env:
  # Target
  TARGET_NAME: qtwidgettest
  PROJECT_NAME: qtconanboilerplate
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  QT_VERSION: "6.3.1"
  QT_DIR: ${{ github.workspace }}
  QT_ARCH: "gcc_64"
  QT_TOOLS: "tools_ifw"
  QT_TARGET: "desktop"

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        os:
          - ubuntu-latest
        generator:
          - "Ninja"
        build_type:
          - Debug

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: "Cancel Previous Runs"
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

      - name: "üß∞ Checkout"
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: "‚öôÔ∏è Install Python"
        id: python
        uses: actions/setup-python@v3

      - name: "‚öôÔ∏è Install Python dependencies"
        shell: bash
        id: python-deps
        run: |
          python -m pip install --upgrade pip
          if [ -f ./.github/workflows/requirements.txt ]; then
            pip install -r ./.github/workflows/requirements.txt;
          fi

      - name: "üîß Setup Cache"
        uses: ./.github/actions/setup_cache
        with:
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: "üêß ‚öôÔ∏è Install Linux dependencies"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            libclang-dev \
            ninja-build \
            gcovr \
            ccache \
            cppcheck

      - name: "‚öôÔ∏è Install Qt Version ${{ env.QT_VERSION }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: "${{ env.QT_VERSION }}"
          dir: "${{ env.QT_DIR }}"
          # host: ${{ runner.os }}
          arch: "${{ env.QT_ARCH }}"
          target: "${{ env.QT_TARGET }}"
          tools: "${{ env.QT_TOOLS }}"
          setup-python: "true"
          cache: "true"
          cache-key-prefix: "${{ runner.os }}-install-qt-action"
          set-env: "true"
          install-deps: "true"

      - name: "Cleanup Conan system packages (they are not properly cached)"
        run: |
          conan remove -f '*/system'

      - name: "Create Working directory"
        run: mkdir -p build

        # make sure coverage is only enabled for Debug builds, since it sets -O0 to make sure coverage
        # has meaningful results
      - name: "Configure CMake"
        working-directory: build
        shell: bash
        run: |
          mkdir -p usr
          conan install ../conanfile.py -b missing -pr:b default -s build_type="${{ matrix.build_type }}"  -g CMakeToolchain
          cmake -S .. -B . -G "${{matrix.generator}}" \
            -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} \
            -DCMAKE_INSTALL_PREFIX:PATH="./usr" \
            -DOPT_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} \
            -DOPTION_BUILD_TESTS:BOOL="TRUE" \
            -DCMAKE_TOOLCHAIN_FILE:PATH="./build/generators/conan_toolchain.cmake"

      - name: "üöß Build"
        working-directory: build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build . --config ${{matrix.build_type}}

      - name: "üêß üß™ Test and coverage"
        if: runner.os == 'Linux'
        working-directory: build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}
          gcovr -j ${{env.nproc}} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml

      - name: "Publish to codecov"
        uses: codecov/codecov-action@v2
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml

  build:
    name: "Build for ${{ matrix.name }}"

    runs-on: ${{ matrix.os }}
    needs: tests

    strategy:
      fail-fast: false
      matrix:
        name: [ubuntu-latest-clang++, macos-latest-clang++, windows-latest-cl.exe]
        build_type:
          - Release
        generator:
          - "Ninja"
        include:
          - name: windows-latest-cl.exe
            os: windows-2019
            cxx: clang-cl.exe
            cc: clang-cl.exe
            qt_arch: win64_msvc2019_64
            arch: x64
            pak_arch: win64
            # generator: 'Visual Studio 16 2019'
          - name: ubuntu-latest-clang++
            os: ubuntu-latest
            qt_arch: gcc_64
            cxx: clang++
            cc: clang
          - name: macos-latest-clang++
            os: macos-latest
            qt_arch: clang_64
            arch: clang_64
            cxx: clang++
            cc: clang

    steps:
      - name: "‚öôÔ∏è Get the version"
        id: get_version
        shell: bash
        run: |
          echo ::set-output name=VERSION::"$(echo $GITHUB_REF | cut -d / -f 3)"

      - name: "üß∞ Checkout"
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: "‚öôÔ∏è Install Python"
        id: python
        uses: actions/setup-python@v3

      - name: "‚öôÔ∏è Install Python dependencies"
        shell: bash
        id: python-deps
        run: |
          python -m pip install --upgrade pip
          if [ -f ./.github/workflows/requirements.txt ]; then
            pip install -r ./.github/workflows/requirements.txt;
          fi

      - name: "üîß Setup Cache"
        uses: ./.github/actions/setup_cache
        with:
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: "üêß ‚öôÔ∏è Install Linux dependencies"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            libclang-dev \
            ninja-build \
            ccache \
            cppcheck

      - name: "‚öôÔ∏è üçé Install macos dependencies"
        if: runner.os == 'macOS'
        run: |
          brew upgrade cmake
          brew install ninja ccache pkg-config
          ln -s "$(brew --prefix llvm)/bin/clang-format" "/usr/local/bin/clang-format"
          ln -s "$(brew --prefix llvm)/bin/clang-tidy" "/usr/local/bin/clang-tidy"
          ln -s "$(brew --prefix llvm)/bin/clang-apply-replacements" "/usr/local/bin/clang-apply-replacements"

      - name: "üßä ‚öôÔ∏è Install Windows dependencies"
        if: runner.os ==  'Windows'
        run: |
          cinst ninja ccache

      - name: "üßä ‚öôÔ∏è Configure MSVC"
        if: runner.os ==  'Windows'
        uses: ilammy/msvc-dev-cmd@v1.10.0
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
          toolset: 14.2
          arch: "${{ matrix.pak_arch }}"

      - name: "Set Compiler Environment"
        uses: lukka/set-shell-env@v1
        with:
          CXX: "${{ matrix.cxx }}"
          CC: "${{ matrix.cc }}"

      - name: "‚öôÔ∏è Install Qt Version ${{ env.QT_VERSION }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: "${{ env.QT_VERSION }}"
          dir: "${{ env.QT_DIR }}"
          # host: "linux" # ${{ runner.os }}
          arch: "${{ matrix.qt_arch }}"
          target: "${{ env.QT_TARGET }}"
          tools: "${{ env.QT_TOOLS }}"
          setup-python: "true"
          cache: "true"
          cache-key-prefix: "${{ runner.os }}-install-qt-action"
          set-env: "true"
          install-deps: "true"

      - name: "Cleanup Conan system packages (they are not properly cached)"
        run: |
          conan remove -f '*/system'

      - name: "Create Build Environment"
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory build

      # make sure coverage is only enabled for Debug builds, since it sets -O0 to make sure coverage
      # has meaningful results
      - name: "‚öôÔ∏è üßä Configure CMake"
        if: runner.os ==  'Windows'
        working-directory: build
        shell: pwsh
        run: |
          conan install ../conanfile.py -b missing -pr:b default -s build_type="${{ matrix.build_type }}"  -g CMakeToolchain
          cmake  `
          -S .. -B  . `
          -G "${{ matrix.generator }}" -A "${{ matrix.arch }}" `
          -DCMAKE_BUILD_TYPE:STRING=${{ env.BUILD_TYPE }} `
          -DCMAKE_TOOLCHAIN_FILE:PATH="./build/generators/conan_toolchain.cmake" `
          -DCMAKE_INSTALL_PREFIX:PATH=${{github.workspace}}/program

        # make sure coverage is only enabled for Debug builds, since it sets -O0 to make sure coverage
        # has meaningful results.
      - name: "‚öôÔ∏è üêß üçé Configure CMake"
        working-directory: build
        shell: bash
        if: runner.os !=  'Windows'
        run: |
          conan install ../conanfile.py -b missing -pr:b default -s build_type="${{ matrix.build_type }}" -g CMakeToolchain
          cmake -S .. -B . -G "${{matrix.generator}}" \
            -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} \
            -DCMAKE_INSTALL_PREFIX:PATH="$GITHUB_WORKSPACE/AppDir/usr" \
            -DCMAKE_TOOLCHAIN_FILE:PATH="./generators/conan_toolchain.cmake"

      - name: "üì¶ üçé Build and package application (macdeployqt and zipfile)"
        working-directory: build
        if: runner.os == 'macOS'
        run: |
          cmake --build . --config ${{matrix.build_type}} --target install
          cmake --build . --config ${{matrix.build_type}} --target pack

      - name: "‚öôÔ∏è üßä Build"
        if: runner.os ==  'Windows'
        working-directory: build
        run: |
          cmake --build . --config ${{matrix.build_type}} --target install
          cmake --build . --config ${{matrix.build_type}} --target  pack

      - name: "‚öôÔ∏è üêß Build"
        if: runner.os == 'Linux'
        working-directory: build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build . --config ${{matrix.build_type}} --target install

      - name: "üì¶ üêß  Create AppImage"
        if: runner.os == 'Linux'
        uses: AppImageCrafters/build-appimage-action@master
        env:
          UPDATE_INFO: gh-releases-zsync|AppImageCrafters|qtwidgettest|latest|*x86_64.AppImage.zsync
        with:
          recipe: "$GITHUB_WORKSPACE/deploy/AppImageBuilder.yml"

      - name: "üêß üì§ Upload Linux artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: AppImage
          path: "./*.AppImage*"

      - name: "üçé üì§ Upload macOS artifacts"
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifacts
          path: build/${{ env.PROJECT_NAME }}-*.*

      - name: "üßä üì§ Upload artifact: Windows Installer"
        if: runner.os ==  'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: build/${{ env.PROJECT_NAME }}*.*

  flatpak-build:
    name: "üêß Build flatpak on ubuntu-20.04"
    runs-on: ubuntu-20.04
    needs: tests

    steps:
      - name: "‚öôÔ∏è Get the version"
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::"$(echo $GITHUB_REF | cut -d / -f 3)"

      - name: "Cancel Previous Runs"
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

      - name: "üß∞ Checkout"
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: "Setup Flatpak"
        run: |
          sudo apt-get -y -qq update
          sudo apt-get install -y flatpak flatpak-builder

      - name: "Setup Flathub"
        run: |
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install -y --noninteractive flathub org.freedesktop.Sdk//20.08
          flatpak install -y --noninteractive flathub org.freedesktop.Platform.GL.default//21.08
          flatpak install -y --noninteractive flathub org.kde.Platform//5.15-21.08
          flatpak install -y --noninteractive flathub org.kde.Sdk//5.15-21.08

      - name: "üì¶ Create flatpak"
        run: |
          BUNDLE="org.jmuelbert.${{env.TARGET_NAME}}.flatpak"
          MANIFEST_PATH=$GITHUB_WORKSPACE/deploy/flatpak.yml
          RUNTIME_REPO="https://flathub.org/repo/flathub.flatpakrepo"
          APP_ID="org.jmuelbert.${{env.TARGET_NAME}}"
          BRANCH="master"
          flatpak-builder --user --disable-rofiles-fuse --repo=repo --force-clean flatpak_app ${MANIFEST_PATH} --install-deps-from=flathub
          flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
          mv $GITHUB_WORKSPACE/org.jmuelbert.${{env.TARGET_NAME}}.flatpak $GITHUB_WORKSPACE/org.jmuelbert.${{env.TARGET_NAME}}_${{ steps.get_version.outputs.VERSION }}.x86_64.flatpak

      - name: "üì§ Upload artifact: FlatPak"
        uses: actions/upload-artifact@v3
        with:
          name: flatpak-artifact
          path: |
            $GITHUB_WORKSPACE/org.jmuelbert.${{env.TARGET_NAME}}_${{ steps.get_version.outputs.VERSION }}.x86_64.flatpak

  snap-build:
    name: "üêß Build snap on ubuntu-20.04"
    runs-on: ubuntu-20.04
    needs: tests

    steps:
      - name: "‚öôÔ∏è Get the version"
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: "Cancel Previous Runs"
        uses: styfle/cancel-workflow-action@0.5.0
        with:
          access_token: ${{ github.token }}

      - name: "üß∞ Checkout"
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: "üì¶ Create snap"
        uses: snapcore/action-build@v1
        id: snapcraft
        with:
          snapcraft-args: --enable-experimental-extensions

      - name: "Rename snap name"
        shell: bash
        run: |
          mv ${{ steps.snapcraft.outputs.snap }} $GITHUB_WORKSPACE/${TARGET_NAME}_${{ steps.get_version.outputs.VERSION }}_amd64.snap
          ls

      - name: "üêß üì§ Upload artifact: SnapPack"
        uses: actions/upload-artifact@v3
        with:
          name: snapcraft-artifact
          path: |
            $GITHUB_WORKSPACE/${{ env.TARGET_NAME}}_*_amd64.snap

  diagram:
    name: "Build diagram"
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: "üß∞ Checkout"
        uses: actions/checkout@master

      - name: "Update diagram"
        uses: githubocto/repo-visualizer@0.7.1
        with:
          output_file: "images/diagram.svg"
          excluded_paths: "dist,node_modules"

  releaseNotes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: "Build Releasenotes"
        id: github_releasenotes
        uses: release-drafter/release-drafter@v5.20.0
        with:
          publish: "${{ steps.check-version.outputs.tag != '' }}"
          tag: "${{ steps.check-version.outputs.tag }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  changeLog:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: "Build/Update ChangeLog"
        id: github_changelog
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Create Release"
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.check-version.outputs }}
        env:
          GITHUB_TOKEN: $${{ secrets.GITHUB_TOKEN }}

  build_GH_Pages:
    name: "Build GH Pages"
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: "Install sphinx"
        run: |
          pip3 install -r docs/requirements.txt

      - name: "Running the Sphinx to gh-pages Action"
        run: |
          sphinx-build docs docs/_build

      - name: "Upload documentation"
        uses: actions/upload-artifact@v3
        with:
          name: gh-docs
          path: docs/_build

  deployGHPages:
    runs-on: ubuntu-latest
    needs: "build_GH_Pages"
    steps:
      - name: "Download Artifact with Pages"
        uses: actions/download-artifact@v3
        with:
          name: gh-docs
          path: docs/_build

      - name: "Deploy to GitHub Pages"
        uses: Cecilapp/GitHub-Pages-deploy@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          email: bot@gh-pages.com
          build_dir: docs/_build

  # Upload continous build
  upload:
    name: "üóÇ Create release and upload artifacts"
    needs:
      - build
      - flatpak-build
      - snap-build

    runs-on: ubuntu-latest
    steps:
      - name: "üì• Download artifacts"
        uses: actions/download-artifact@v3

      - name: "üóÇ Inspect directory after downloading artifacts"
        run: ls -alFR

      - name: "üì§ Upload Release: AppImage"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.appimage
          asset_name: ${{env.TARGET_NAME}}.appimage
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: FlatPak"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.flatpak
          asset_name: ${{env.TARGET_NAME}}.flatpak
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: snap"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.amd64.snap
          asset_name: ${{env.TARGET_NAME}}.amd64.snap
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: macOS"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.dmg
          asset_name: ${{env.TARGET_NAME}}.dmg
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: windows"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.TARGET_NAME }}.exe
          asset_name: ${{ env.TARGET_NAME}}-win.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: zip for windows"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}-win.zip
          asset_name: ${{ env.TARGET_NAME}}-win-${{ steps.get_version.outputs.VERSION }}.zip
          tag: ${{ github.ref }}
          overwrite: true
