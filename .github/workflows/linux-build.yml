---
name: "Linux Build"

on:
  push:
    tags:
      - "*"
    branches-ignore:
      - "dependabot/**"
    paths-ignore:
      - "*.mde"
      - "LICENSE.txt"
      - "README.md"
      - ".github/**"
      - "!.github/workflows/linux-build.yml"
  pull_request:
    paths-ignore:
      - "*.mde"
      - "LICENSE.txt"
      - "README.md"
      - ".github/**"
      - "!.github/workflows/linux-build.yml"
  release:
    types: [published]

env:
  # Target
  TARGET_NAME: qtwidgettest
  PROJECT_NAME: qtconanboilerplate
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  QT_VERSION: "6.3.1"
  QT_DIR: ${{ github.workspace }}
  QT_ARCH: "gcc_64"
  QT_TOOLS: "tools_ifw"
  QT_TARGET: "desktop"

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        arch: [x64]
        generator: ["Ninja"]

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: "Change to Release if tag"
        if: github.event_name == 'release' && github.event.action == 'created'
        run: echo "BUILD_TYPE=Release" >> $GITHUB_ENV

      - name: "üß∞ Checkout"
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: "‚öôÔ∏è Install Python"
        id: python
        uses: actions/setup-python@v3

      - name: "‚öôÔ∏è Install Python dependencies"
        shell: bash
        id: python-deps
        run: |
          python -m pip install --upgrade pip
          if [ -f ./.github/workflows/requirements.txt ]; then
            pip install -r ./.github/workflows/requirements.txt;
          fi

      - name: "üîß Setup Cache"
        uses: ./.github/actions/setup_cache
        with:
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.config.generator }}

      - name: "üêß ‚öôÔ∏è Install Linux dependencies"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            libclang-dev \
            ninja-build \
            ccache \
            cppcheck

      - name: "‚öôÔ∏è Install Qt Version ${{ env.QT_VERSION }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: "${{ env.QT_VERSION }}"
          dir: "${{ env.QT_DIR }}"
          host: "linux" # ${{ runner.os }}
          arch: "${{ env.QT_ARCH }}"
          target: "${{ env.QT_TARGET }}"
          tools: "${{ env.QT_TOOLS }}"
          setup-python: "true"
          cache: "true"
          cache-key-prefix: "${{ runner.os }}-install-qt-action"
          set-env: "true"
          install-deps: "true"

      - name: "Cleanup Conan system packages (they are not properly cached)"
        run: |
          conan remove -f '*/system'
      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory build

      - name: "Configure CMake"
        working-directory: build
        run: |
          conan install ../conanfile.py -b missing -pr:b default -s build_type="${{ env.BUILD_TYPE }}"  -g CMakeToolchain
           cmake -G "Ninja" \
          -S .. -B ${{ github.workspace }}/build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_TOOLCHAIN_FILE:PATH="./build/generators/conan_toolchain.cmake" \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/AppDir/usr

      - name: "üöß Build"
        working-directory: build
        run: |
          cmake --build . --parallel --config ${{ env.BUILD_TYPE }} --target install
          ls "${{ github.workspace }}/deploy/"

      - name: "üì¶ üêß  Create AppImage"
        if: runner.os == 'Linux'
        uses: AppImageCrafters/build-appimage-action@master
        env:
          UPDATE_INFO: gh-releases-zsync|AppImageCrafters|qtwidgettest|latest|*x86_64.AppImage.zsync
        with:
          recipe: "./deploy/AppImageBuilder.yml"

      - name: "üêß üì§ Upload Linux artifacts"
        uses: actions/upload-artifact@v2
        with:
          name: AppImage
          path: "./*.AppImage*"

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: linux
    name: Create\Update release
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: Linux
          path: ${{ github.workspace }}/Linux
      - name: Get branch name
        uses: EthanSK/git-branch-name-action@v1
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: "${{ github.workspace }}/Linux/Linux-Setup"
          name: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: ${{ env.GIT_BRANCH_NAME != 'main' }}
