---
# This workflow should cleanup everything unneeded from the template project

name: Template Janitor

# yamllint disable
on:
  # yamllint enables
  pull_request:
  release:
    types: [published]
  push:
    # tags:
    branches:
      - main
      - develop

env:
  TEMPLATES_PATH: ".github/template"
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  BUILD_TYPE: Release
  QT_VERSION: "6.3.1"
  QT_DIR: ${{ github.workspace }}
  QT_ARCH: "gcc_64"
  QT_TOOLS: ""
  QT_TARGET: "desktop"

jobs:
  template-cleanup:
    name: Cleanup after create
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - gcc-10
        generator:
          - "Unix Makefiles"
        build_type:
          - Debug

    steps:
      - name: "üß∞ Checkout"
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Get organization and project name
        run: |
          echo "NEW_ORG=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "NEW_PROJECT=${{ github.event.repository.name }}" >> $GITHUB_ENV
          echo "NEW_URL=${{ github.repositoryUrl }}" >> $GITHUB_ENV

      - uses: octokit/request-action@v2.x
        id: get_repo_meta
        with:
          route: GET /repos/{owner}/{repo}
          owner: ${{ env.NEW_ORG }}
          repo: ${{ env.NEW_PROJECT }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Use testing variables if still a template
        if: fromJson(steps.get_repo_meta.outputs.data).is_template == true
        run: |
          # This name is unsafe because it is not a valid C++ identifier
          echo "NEW_PROJECT=my-unsafe.project" >> $GITHUB_ENV

      - name: Add safe replacement variable versions
        run: |
          # hyphens and dots in c++ identifiers are forbidden. Use underscores instead.
          NEW_SAFE_PROJECT=$(echo ${{ env.NEW_PROJECT }} | sed "s/-/_/g" | sed "s/\./_/g" )
          echo "NEW_SAFE_PROJECT=$NEW_SAFE_PROJECT" >> $GITHUB_ENV

      # Rename all cpp_starter_project occurrences to current repository and remove this workflow
      - name: Insert new org and project
        run: |
          # rename the CMake project to match the github project
          sed -i "s/myproject/${{ env.NEW_SAFE_PROJECT }}/gi" CMakeLists.txt configured_files/config.hpp.in src/apps/source/main.cpp test/CMakeLists.txt fuzz_test/CMakeLists.txt

          # Update URL placeholders for project
          sed -i "s|%%myurl%%|${{ fromJson(steps.get_repo_meta.outputs.data).html_url }}|gi" CMakeLists.txt

          # fill in placeholders of readme and move it into place
          sed -i "s/%%myorg%%/${{ env.NEW_ORG }}/g" ${{ env.TEMPLATES_PATH }}/README.md
          sed -i "s/%%myproject%%/${{ env.NEW_PROJECT }}/g" ${{ env.TEMPLATES_PATH }}/README.md
          sed -i "s|%%description%%|${{ fromJson(steps.get_repo_meta.outputs.data).description }}|g" ${{ env.TEMPLATES_PATH }}/README.md
          cp ${{ env.TEMPLATES_PATH }}/README.md README.md

      - name: Print diff after replacement
        run: |
          # Exclude the README as that is checked separately!
          git diff ':!README.md'
          # following should not have any diffs
          diff ${{ env.TEMPLATES_PATH }}/README.md README.md

      - name: Remove unwanted files
        run: |
          # No tests needed as this will fail if any file from the list is missing/misspelled
          xargs rm -r < ${{ env.TEMPLATES_PATH }}/removal-list

      - name: Clean up before commit and push
        run: |
          rm -r ${{ env.TEMPLATES_PATH }}

          # Can we get that from a variable?
          # Remove this workflow as it has fulfilled its purpose
          rm .github/workflows/template-janitor.yml

      - name: "‚öôÔ∏è Install Python"
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: "‚öôÔ∏è Install Python dependencies"
        shell: bash
        id: python-deps
        run: |
          python -m pip install --upgrade pip
          pip3 install "conan<2"

      - name: "üîß Setup Cache"
        uses: ./.github/actions/setup_cache
        with:
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: "üêß ‚öôÔ∏è Install Linux dependencies"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            ccache
          echo "CCACHE_DIR=${{runner.workspace}}/ccache" >> $GITHUB_ENV
          echo "CXX=g++-10" >> $GITHUB_ENV
          echo "CC=gcc-10" >> $GITHUB_ENV

      - name: Configure Conan
        shell: bash
        run: |
          echo "Setup conan"
          conan user
          conan config init
          conan profile show default

      - name: (Linux/macOS) restore ccache
        if: matrix.os != 'windows-latest'
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{runner.workspace}}/ccache
          key: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}-${{ github.sha }}
          restore-keys: ccache-${{matrix.os}}-${{matrix.compiler}}-${{matrix.qt}}

      - name: (Linux/macOS) check ccache stats prior to build
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: ccache --zero-stats --show-stats

      - name: "Add GCC problem matcher"
        if: runner.os ==  'Linux'
        uses: ammaraskar/gcc-problem-matcher@master

      - name: "‚öôÔ∏è Install Qt Version ${{ env.QT_VERSION }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: "${{ env.QT_VERSION }}"
          dir: "${{ env.QT_DIR }}"
          # host: "linux" # ${{ runner.os }}
          arch: "${{ env.QT_ARCH }}"
          target: "${{ env.QT_TARGET }}"
          tools: "${{ env.QT_TOOLS }}"
          setup-python: "true"
          cache: "true"
          cache-key-prefix: "${{ runner.os }}-install-qt-action"
          set-env: "true"
          install-deps: "true"

      - name: Cleanup Conan system packages (they are not properly cached)
        run: |
          conan remove -f '*/system'

      - name: "Create Build Environment"
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory build

      - name: Test simple configuration to make sure nothing broke
        working-directory: build
        shell: bash
        run: |
          cmake -S .. -B . -G "${{matrix.generator}}" \
           -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} \
           -DCMAKE_INSTALL_PREFIX:PATH="${{github.workspace}}/AppDir/usr" \
           -DBUILD_SHARED_LIBS:BOOL="TRUE"
          cmake --build . --config ${{matrix.build_type}} --target install
          ccache --zero-stats --show-stats

      - uses: EndBug/add-and-commit@v4
        # only commit and push if we are not a template project anymore!
        if: fromJson(steps.get_repo_meta.outputs.data).is_template != true
        with:
          author_name: Template Janitor
          author_email: template.janitor@example.com
          message: "Cleanup template and initialize repository"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  template-rename:
    name: Renames template when a new name is detected
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler:
          - gcc-11
        generator:
          - "Unix Makefiles"
        build_type:
          - Debug

    steps:
      - uses: actions/checkout@v2

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.generator }}

      - name: Get organization and project name
        run: |
          echo "TEST_RUN=false" >> "$GITHUB_ENV"
          echo "NEW_ORG=${{ github.repository_owner }}" >> "$GITHUB_ENV"
          echo "NEW_PROJECT=${{ github.event.repository.name }}" >> "$GITHUB_ENV"
          echo "NEW_REPOSITORY=${{ github.repository }}" >> "$GITHUB_ENV"
          echo "TEMPLATE_NAME=`cat ${{ env.TEMPLATES_PATH }}/template_name`" >> "$GITHUB_ENV"
          echo "TEMPLATE_REPOSITORY=`cat ${{ env.TEMPLATES_PATH }}/template_repository`" >> "$GITHUB_ENV"

      - uses: octokit/request-action@v2.x
        id: get_repo_meta
        with:
          route: GET /repos/{owner}/{repo}
          owner: ${{ env.NEW_ORG }}
          repo: ${{ env.NEW_PROJECT }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup fake test org/project names if project didn't change
        if: env.TEMPLATE_NAME == env.NEW_PROJECT
        run: |
          echo "TEST_RUN=true" >> "$GITHUB_ENV"
          echo "NEW_ORG=${{ github.repository_owner }}" >> "$GITHUB_ENV"
          echo "NEW_PROJECT=TEST_PROJECT" >> "$GITHUB_ENV"
          echo "NEW_REPOSITORY=TEST_REPOSITORY" >> "$GITHUB_ENV"

      # Rename all cpp_starter_project occurrences to current repository and remove this workflow
      - name: Update repository to match new template information
        run: |
          # Update the README and template files to match the new org / repository names
          sed -i "s|${{ env.TEMPLATE_REPOSITORY }}|${{ env.NEW_REPOSITORY }}|g" README.md ${{ env.TEMPLATES_PATH }}/template_repository
          sed -i "s|${{ env.TEMPLATE_NAME }}|${{ env.NEW_PROJECT }}|g" README.md ${{ env.TEMPLATES_PATH }}/template_name

      - name: Print diff after template name replacement
        run: |
          git diff

      - name: "‚öôÔ∏è Install Python"
        id: python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: "‚öôÔ∏è Install Python dependencies"
        shell: bash
        id: python-deps
        run: |
          python -m pip install --upgrade pip
          pip3 install "conan<2"

      - name: "üîß Setup Cache"
        uses: ./.github/actions/setup_cache
        with:
          build_type: ${{ matrix.build_type }}
          generator: ${{ matrix.config.generator }}

      - name: "‚öôÔ∏è Install Linux dependencies"
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            ccache

      - name: "‚öôÔ∏è Install Qt Version ${{ env.QT_VERSION }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: "${{ env.QT_VERSION }}"
          dir: "${{ env.QT_DIR }}"
          # host: "linux" # ${{ runner.os }}
          arch: "${{ env.QT_ARCH }}"
          target: "${{ env.QT_TARGET }}"
          tools: "${{ env.QT_TOOLS }}"
          setup-python: "true"
          cache: "true"
          cache-key-prefix: "${{ runner.os }}-install-qt-action"
          set-env: "true"
          install-deps: "true"

      - name: Cleanup Conan system packages (they are not properly cached)
        run: |
          conan remove -f '*/system'

      - name: Test simple configuration to make sure nothing broke (default compiler,cmake,developer_mode OFF)
        run: |
          cmake -S .. -B . -G "${{matrix.generator}}" \
           -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} \
           -DCMAKE_INSTALL_PREFIX:PATH="${{github.workspace}}/AppDir/usr" \
           -DBUILD_SHARED_LIBS:BOOL="TRUE"
          cmake --build . --config ${{matrix.build_type}} --target install
          ccache --zero-stats --show-stats

      - uses: EndBug/add-and-commit@v4
        # only commit and push if we are a template and project name has changed
        if: fromJson(steps.get_repo_meta.outputs.data).is_template == true && env.TEST_RUN == 'false'
        with:
          author_name: Template Janitor
          author_email: template.janitor@example.com
          message: "Change Template Name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
