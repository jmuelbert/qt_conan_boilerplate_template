---
name: "Windows Build"

on:
  push:
    tags:
      - "*"
    branches-ignore:
      - "dependabot/**"
    paths-ignore:
      - "*.mde"
      - "LICENSE.txt"
      - "README.md"
      - ".github/**"
      - "!.github/workflows/windows-build.yml"
  pull_request:
    paths-ignore:
      - "*.mde"
      - "LICENSE.txt"
      - "README.md"
      - ".github/**"
      - "!.github/workflows/windows-build.yml"
  release:
    types: [created]

env:
  # Target
  TARGET_NAME: qtwidgettest
  PROJECT_NAME: qtconanboilerplate
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  QT_VERSION: "6.3.1"
  QT_DIR: ${{ github.workspace }}
  QT_ARCH: "win64_msvc2019_64"
  QT_TARGET: "desktop"
  QT_TOOLS: "tools_ifw"

jobs:
  windows:
    name: Windows
    runs-on: windows-2019
    strategy:
      fail-fast: true
      matrix:
        arch: [x64]
        generator: ["Visual Studio 16 2019"]
    steps:
      - name: "Change to Release if tag"
        if: github.event_name == 'release' && github.event.action == 'created'
        run: echo "BUILD_TYPE=Release" >> $GITHUB_ENV

      - name: "üß∞ Checkout"
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: "‚öôÔ∏è Install Python"
        id: python
        uses: actions/setup-python@v3

      - name: "‚öôÔ∏è Install Python dependencies"
        shell: bash
        id: python-deps
        run: |
          python -m pip install --upgrade pip
          if [ -f ./.github/workflows/requirements.txt ]; then
            pip install -r ./.github/workflows/requirements.txt;
          fi

      - name: "üîß Setup Cache"
        uses: ./.github/actions/setup_cache
        with:
          build_type: "${{ matrix.build_type }}"
          generator: "${{ matrix.generator }}"

      - name: "üßä ‚öôÔ∏è Install Windows dependencies"
        if: runner.os ==  'Windows'
        run: |
          cinst ninja ccache

      - name: "‚öôÔ∏è Install Qt Version ${{ env.QT_VERSION }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: "${{ env.QT_VERSION }}"
          dir: "${{ env.QT_DIR }}"
          # host: ${{ runner.os }}
          arch: "${{ env.QT_ARCH }}"
          target: "${{ env.QT_TARGET }}"
          tools: "${{ env.QT_TOOLS }}"
          setup-python: "true"
          cache: "true"
          cache-key-prefix: "${{ runner.os }}-install-qt-action"
          set-env: "true"
          install-deps: "true"

      - name: "Cleanup Conan system packages (they are not properly cached)"
        run: |
          conan remove -f '*/system'

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory build

      - name: "Configure CMake"
        working-directory: build
        shell: pwsh
        run: |
          conan install ../conanfile.py -b missing -pr:b default -s build_type="${{ env.BUILD_TYPE }}"  -g CMakeToolchain
          cmake $env:GITHUB_WORKSPACE `
          -S .. -B  . `
          -G "${{ matrix.generator }}" -A "${{ matrix.arch }}" `
          -DCMAKE_BUILD_TYPE:STRING=${{ env.BUILD_TYPE }} `
          -DCMAKE_TOOLCHAIN_FILE:PATH="./build/generators/conan_toolchain.cmake" `
          -DCMAKE_INSTALL_PREFIX:PATH=${{github.workspace}}/program

      - name: "Build"
        working-directory: build
        run: |
          cmake --build . --parallel --config ${{ env.BUILD_TYPE }} --target install
          cmake --build . --parallel --config ${{ env.BUILD_TYPE }} --target pack

      - name: "üßä üì§ Upload artifact: Windows Installer"
        if: runner.os ==  'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: build/qtconanboilerplate*.*

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: windows
    name: Create\Update release
    runs-on: ubuntu-latest
    steps:
      - name: "Download artifact"
        uses: actions/download-artifact@v3
        with:
          name: windows-artifacts
          path: ${{ github.workspace }}/Windows

      - name: "Get branch name"
        uses: EthanSK/git-branch-name-action@v1

      - name: "Create Release"
        id: create_release
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifactErrorsFailBuild: true
          artifacts: windows-artifacts
          name: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: ${{ env.GIT_BRANCH_NAME != 'main' }}
