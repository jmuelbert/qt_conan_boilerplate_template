---
# https://taskfile.dev/#/installation
version: 3

tasks:
  test:
    - |
      {{if eq OS "darwin"}}
        PRESET_NAME="test-unixlike-clang-debug"
        BUILD_TYPE="Debug"
        ENABLE_DEVELOPER_MODE=False
        conan install ./conanfile.py -b missing -pr:b default -s build_type="${BUILD_TYPE}" -s compiler.version=13.1 -g CMakeToolchain --output-folder=./out/build/${PRESET_NAME}
        cmake --preset ${PRESET_NAME}
        cmake --build ./out/build/${PRESET_NAME}
        cd ./out/build/${PRESET_NAME} &&  ctest -C "${BUILD_TYPE}" --verbose
      {{end}}
      {{if eq OS "linux"}}
        PRESET_NAME="test-unixlike-gcc-debug"
        BUILD_TYPE="Debug"
        ENABLE_DEVELOPER_MODE=False
        conan install ./conanfile.py -b missing -pr:b default -s build_type="${BUILD_TYPE}" -s compiler.version=13.1 -g CMakeToolchain --output-folder=./out/build/${PRESET_NAME}
        cmake --preset ${PRESET_NAME}
        cmake --build ./out/build/${PRESET_NAME}
        cd ./out/build/${PRESET_NAME} &&  ctest -C "${BUILD_TYPE}" --verbose
      {{end}}

  test_release:
    - cmake -S . -B ./build -DCMAKE_BUILD_TYPE:STRING=Release -G '{{.CMAKE_GENERATOR | default "Ninja Multi-Config"}}'
    - cmake --build ./build --config Release
    - cd ./build && ctest -C Release --verbose

  test_install:
    cmds:
      - task: test_release
      - cmake --install ./test/build --config Release --prefix ./install
      - cmake ./test_install -B ./test_install/build -DCMAKE_BUILD_TYPE:STRING=Release -G '{{.CMAKE_GENERATOR | default "Ninja Multi-Config"}}' -DCMAKE_PREFIX_PATH:STRING={{.CWD}}/install;
      - cmake --build ./test_install/build --config Release
      - cd ./test_install/build && ctest -C Release --verbose
    vars:
      CWD:
        sh: git rev-parse --show-toplevel

  pack:
    cmds:
      - task: test_release

      - echo '{{OS}} {{ARCH}}'
      - |
        {{if eq OS "darwin"}}
          cd ./build && cpack -G "DragNDrop;ZIP"
        {{end}}
        {{if eq OS "windows" }}
          cd ./build && cpack -G "NSIS64"
        {{end}}
        {{if eq OS "linux"}}
          cd ./build && cpack -G  "STGZ; TBZ2"
        {{end}}

  lint:
    - |
      {{if eq OS "windows"}}
        powershell -c '$files=(git ls-files --exclude-standard); foreach ($file in $files) { if ((get-item $file).Extension -in ".cpp", ".hpp", ".c", ".cc", ".cxx", ".hxx", ".ixx") { clang-format -i -style=file $file } }'
      {{else}}
        git ls-files --exclude-standard | grep -E '\.(cpp|hpp|c|cc|cxx|hxx|ixx)$' | xargs clang-format -i -style=file
      {{end}}
    - |
      {{if eq OS "windows"}}
      powershell -c '$files=(git ls-files --exclude-standard); foreach ($file in $files) { $item=(get-item $file); if (($item.Name -eq "CMakeLists.txt") -or ($item.Extension -in ".cmake")) { cmake-format --in-place $file; cmake-lint $file --disabled-codes C0103 C0301 R0912 R0915 R0913 --suppress-decorations } }'
      {{else}}
        git ls-files --exclude-standard | grep -E '(CMakeLists\.txt)|(\.(cmake))$' | xargs cmake-format --in-place | xargs cmake-lint --disabled-codes C0103 C0301 R0912 R0915 R0913 --suppress-decorations
      {{end}}

    - npx cspell "**" --show-suggestions --color --no-progress

  clean: |
    {{if eq OS "windows"}}
      powershell -c 'function rmrf($path) { if (test-path $path) { rm -r -force $path }}; rmrf ./build; rmrf ./install'
    {{else}}
      rm -rf ./build ./install
    {{end}}
